name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify file structure
        run: |
          echo "=== Repository structure ==="
          ls -la
          echo "=== Python package ==="
          ls -la intg-russound/
          echo "=== Checking required files ==="
          test -f driver.json && echo "✓ driver.json exists" || echo "✗ driver.json missing"
          test -f requirements.txt && echo "✓ requirements.txt exists" || echo "✗ requirements.txt missing"
          test -f intg-russound/driver.py && echo "✓ driver.py exists" || echo "✗ driver.py missing"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "FILENAME=uc-intg-russound-v$VERSION.tar.gz" >> $GITHUB_OUTPUT
            echo "Building manual version: $VERSION"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "FILENAME=uc-intg-russound-v$VERSION.tar.gz" >> $GITHUB_OUTPUT
            echo "Building tagged version: $VERSION"
          else
            VERSION="dev-$(date +%Y%m%d-%H%M%S)"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "FILENAME=uc-intg-russound-$VERSION.tar.gz" >> $GITHUB_OUTPUT
            echo "Building dev version: $VERSION"
          fi

      - name: Build with PyInstaller
        run: |
          echo "=== Starting PyInstaller build ==="
          docker run --rm \
            --platform=linux/arm64 \
            -v "$PWD":/workspace \
            -w /workspace \
            docker.io/unfoldedcircle/r2-pyinstaller:3.11.13-0.4.0 \
            bash -c "
              echo 'Installing dependencies...' && \
              python -m pip install --no-cache-dir -r requirements.txt && \
              echo 'Running PyInstaller...' && \
              pyinstaller --clean --onedir --name driver intg-russound/driver.py && \
              echo 'Build complete!' && \
              ls -la dist/
            "

      - name: Verify build output
        run: |
          echo "=== Checking build output ==="
          ls -la dist/ || echo "dist/ directory not found"
          ls -la dist/driver/ || echo "dist/driver/ directory not found"
          test -f dist/driver/driver && echo "✓ driver binary created" || echo "✗ driver binary missing"

      - name: Create bin directory and copy files
        run: |
          echo "=== Creating package structure ==="
          mkdir -p bin
          cp -r dist/driver/* bin/
          echo "=== bin/ contents ==="
          ls -la bin/
          echo "=== Verifying driver binary ==="
          test -f bin/driver && echo "✓ driver copied successfully" || exit 1

      - name: Create tarball
        run: |
          echo "=== Creating tarball: ${{ steps.get_version.outputs.FILENAME }} ==="
          tar -czf ${{ steps.get_version.outputs.FILENAME }} driver.json bin/
          echo "=== Tarball created ==="
          ls -lh ${{ steps.get_version.outputs.FILENAME }}
          echo "=== Tarball contents ==="
          tar -tzf ${{ steps.get_version.outputs.FILENAME }} | head -20

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.get_version.outputs.FILENAME }}
          body: |
            Russound RIO Integration for Unfolded Circle Remote R3
            
            Version: v${{ steps.get_version.outputs.VERSION }}
            
            ## Installation
            1. Download the `${{ steps.get_version.outputs.FILENAME }}` file
            2. Open your Remote R3 web configurator
            3. Navigate to Integrations > Add Integration > Install Custom
            4. Upload the .tar.gz file
            5. Follow the setup wizard
            
            ## Changelog
            See [CHANGELOG.md](CHANGELOG.md) for details.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: uc-intg-russound-v${{ steps.get_version.outputs.VERSION }}
          path: ${{ steps.get_version.outputs.FILENAME }}
          retention-days: 30
